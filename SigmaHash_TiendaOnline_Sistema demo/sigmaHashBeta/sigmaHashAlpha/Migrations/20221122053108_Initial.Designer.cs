// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using sigmaHashAlpha.Data;

#nullable disable

namespace sigmaHashAlpha.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20221122053108_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("sigmaHashAlpha.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("CompleteName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DNI")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("OptInorOptOut")
                        .HasColumnType("bit");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("sigmaHashAlpha.Infrastructure.Reservations.Reservation", b =>
                {
                    b.Property<string>("ReservationId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("Archived")
                        .HasColumnType("bit");

                    b.Property<byte[]>("BankTransferReceipt")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Created")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("DNI")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsExpired")
                        .HasColumnType("bit");

                    b.Property<string>("Telephone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("ReservationId");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("sigmaHashAlpha.Infrastructure.Reservations.ReservationItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReservationItemId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ReservationItems");
                });

            modelBuilder.Entity("sigmaHashAlpha.Infrastructure.Reservations.Sale", b =>
                {
                    b.Property<string>("ReservationId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("Archived")
                        .HasColumnType("bit");

                    b.Property<byte[]>("BankTransferReceipt")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Created")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("DNI")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Telephone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("ReservationId");

                    b.ToTable("Sales");
                });

            modelBuilder.Entity("sigmaHashAlpha.Infrastructure.Reservations.User_Reservation", b =>
                {
                    b.Property<int>("UserReservationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserReservationId"), 1L, 1);

                    b.Property<string>("Id")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReservationId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserReservationId");

                    b.ToTable("UserReservations");
                });

            modelBuilder.Entity("sigmaHashAlpha.Infrastructure.Roles.RoledUsers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RoledUsers");
                });

            modelBuilder.Entity("sigmaHashAlpha.Models.ProductImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProductImages");
                });

            modelBuilder.Entity("sigmaHashAlpha.Models.Products.Case", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnOrder(1);

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(2);

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(4);

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FactorMother")
                        .HasColumnType("nvarchar(max)");

                    b.Property<short?>("Fans120mmIncluded")
                        .HasColumnType("smallint");

                    b.Property<short?>("Fans120mmSupported")
                        .HasColumnType("smallint");

                    b.Property<short?>("Fans140mmIncluded")
                        .HasColumnType("smallint");

                    b.Property<short?>("Fans140mmSupported")
                        .HasColumnType("smallint");

                    b.Property<short?>("Fans200mmIncluded")
                        .HasColumnType("smallint");

                    b.Property<short?>("Fans200mmSupported")
                        .HasColumnType("smallint");

                    b.Property<short?>("Fans80mmIncluded")
                        .HasColumnType("smallint");

                    b.Property<short?>("Fans80mmSupported")
                        .HasColumnType("smallint");

                    b.Property<bool>("HDFrontAudio")
                        .HasColumnType("bit");

                    b.Property<short?>("Height")
                        .HasColumnType("smallint");

                    b.Property<short?>("Lenght")
                        .HasColumnType("smallint");

                    b.Property<short?>("MaxCPUHeight")
                        .HasColumnType("smallint");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(3);

                    b.Property<float>("Price")
                        .HasColumnType("real")
                        .HasColumnOrder(5);

                    b.Property<string>("RBG")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("RGBControl")
                        .HasColumnType("bit");

                    b.Property<short?>("Radiator240mmSupport")
                        .HasColumnType("smallint");

                    b.Property<short?>("Radiator280mmSupport")
                        .HasColumnType("smallint");

                    b.Property<short?>("Radiator360mmSupport")
                        .HasColumnType("smallint");

                    b.Property<short?>("Radiator420mmSupport")
                        .HasColumnType("smallint");

                    b.Property<bool>("ShipsInternational")
                        .HasColumnType("bit")
                        .HasColumnOrder(8);

                    b.Property<bool>("ShipsNational")
                        .HasColumnType("bit")
                        .HasColumnOrder(7);

                    b.Property<bool>("SideWindow")
                        .HasColumnType("bit");

                    b.Property<bool>("TopPositionPSU")
                        .HasColumnType("bit");

                    b.Property<short?>("USB20front")
                        .HasColumnType("smallint");

                    b.Property<short?>("USB30front")
                        .HasColumnType("smallint");

                    b.Property<short?>("USBTypeC")
                        .HasColumnType("smallint");

                    b.Property<short?>("USBTypeCInternal")
                        .HasColumnType("smallint");

                    b.Property<short?>("Warranty")
                        .IsRequired()
                        .HasColumnType("smallint")
                        .HasColumnOrder(6);

                    b.Property<short?>("Width")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.ToTable("Cases");
                });

            modelBuilder.Entity("sigmaHashAlpha.Models.Products.CPU", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnOrder(1);

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(2);

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(4);

                    b.Property<short?>("Cores")
                        .HasColumnType("smallint");

                    b.Property<double?>("Frequency")
                        .HasColumnType("float");

                    b.Property<string>("GPUChipset")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IncludesCooler")
                        .HasColumnType("bit");

                    b.Property<short?>("L3")
                        .HasColumnType("smallint");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(3);

                    b.Property<float>("Price")
                        .HasColumnType("real")
                        .HasColumnOrder(5);

                    b.Property<string>("Series")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ShipsInternational")
                        .HasColumnType("bit")
                        .HasColumnOrder(8);

                    b.Property<bool>("ShipsNational")
                        .HasColumnType("bit")
                        .HasColumnOrder(7);

                    b.Property<string>("Socket")
                        .HasColumnType("nvarchar(max)");

                    b.Property<short?>("TDP")
                        .HasColumnType("smallint");

                    b.Property<short?>("Threads")
                        .HasColumnType("smallint");

                    b.Property<double?>("TurboFrequency")
                        .HasColumnType("float");

                    b.Property<short?>("Warranty")
                        .IsRequired()
                        .HasColumnType("smallint")
                        .HasColumnOrder(6);

                    b.HasKey("Id");

                    b.ToTable("Cpus");
                });

            modelBuilder.Entity("sigmaHashAlpha.Models.Products.GMonitor", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnOrder(1);

                    b.Property<bool>("AMDFreeSync")
                        .HasColumnType("bit");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(2);

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(4);

                    b.Property<short?>("DVI")
                        .HasColumnType("smallint");

                    b.Property<short?>("DisplayPort")
                        .HasColumnType("smallint");

                    b.Property<short?>("HDMI")
                        .HasColumnType("smallint");

                    b.Property<short?>("Height")
                        .HasColumnType("smallint");

                    b.Property<short?>("Inches")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsCurved")
                        .HasColumnType("bit");

                    b.Property<string>("MaxResolution")
                        .HasColumnType("nvarchar(max)");

                    b.Property<short?>("MiniDisplayPort")
                        .HasColumnType("smallint");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(3);

                    b.Property<bool>("NvidiaGSync")
                        .HasColumnType("bit");

                    b.Property<float>("Price")
                        .HasColumnType("real")
                        .HasColumnOrder(5);

                    b.Property<short?>("RefreshRate")
                        .HasColumnType("smallint");

                    b.Property<string>("RetroilluminationType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ShipsInternational")
                        .HasColumnType("bit")
                        .HasColumnOrder(8);

                    b.Property<bool>("ShipsNational")
                        .HasColumnType("bit")
                        .HasColumnOrder(7);

                    b.Property<bool>("TouchScreen")
                        .HasColumnType("bit");

                    b.Property<short?>("Usb20Ports")
                        .HasColumnType("smallint");

                    b.Property<short?>("Usb30Ports")
                        .HasColumnType("smallint");

                    b.Property<short?>("Usb31Ports")
                        .HasColumnType("smallint");

                    b.Property<short?>("VGA")
                        .HasColumnType("smallint");

                    b.Property<short?>("Warranty")
                        .IsRequired()
                        .HasColumnType("smallint")
                        .HasColumnOrder(6);

                    b.Property<short?>("Width")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.ToTable("Monitors");
                });

            modelBuilder.Entity("sigmaHashAlpha.Models.Products.GPU", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnOrder(1);

                    b.Property<short?>("AmountOfCoolers")
                        .HasColumnType("smallint");

                    b.Property<bool>("Backplate")
                        .HasColumnType("bit");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(2);

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(4);

                    b.Property<short?>("Consumption")
                        .HasColumnType("smallint");

                    b.Property<short?>("CoreTurboSpeed")
                        .HasColumnType("smallint");

                    b.Property<short?>("DVIdigital")
                        .HasColumnType("smallint");

                    b.Property<short?>("DisplayPorts")
                        .HasColumnType("smallint");

                    b.Property<bool>("DoubleBridge")
                        .HasColumnType("bit");

                    b.Property<short?>("HDMI")
                        .HasColumnType("smallint");

                    b.Property<short?>("Lenght")
                        .HasColumnType("smallint");

                    b.Property<short?>("MemoryCapacity")
                        .HasColumnType("smallint");

                    b.Property<short?>("MemoryInterface")
                        .HasColumnType("smallint");

                    b.Property<short?>("MemorySpeed")
                        .HasColumnType("smallint");

                    b.Property<string>("MemoryType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(3);

                    b.Property<float>("Price")
                        .HasColumnType("real")
                        .HasColumnOrder(5);

                    b.Property<short?>("RecommendedWatts")
                        .HasColumnType("smallint");

                    b.Property<string>("SLIorCrossfire")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ShipsInternational")
                        .HasColumnType("bit")
                        .HasColumnOrder(8);

                    b.Property<bool>("ShipsNational")
                        .HasColumnType("bit")
                        .HasColumnOrder(7);

                    b.Property<short?>("USBtypeC")
                        .HasColumnType("smallint");

                    b.Property<short?>("VGA")
                        .HasColumnType("smallint");

                    b.Property<bool>("VGAWaterCooling")
                        .HasColumnType("bit");

                    b.Property<short?>("Warranty")
                        .IsRequired()
                        .HasColumnType("smallint")
                        .HasColumnOrder(6);

                    b.Property<short?>("Width")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.ToTable("Gpus");
                });

            modelBuilder.Entity("sigmaHashAlpha.Models.Products.Keyboard", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnOrder(1);

                    b.Property<bool>("AntiGhosting")
                        .HasColumnType("bit");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(2);

                    b.Property<bool>("CanRemoveCable")
                        .HasColumnType("bit");

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(4);

                    b.Property<string>("MechanismType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(3);

                    b.Property<bool>("NKeyRollover")
                        .HasColumnType("bit");

                    b.Property<float>("Price")
                        .HasColumnType("real")
                        .HasColumnOrder(5);

                    b.Property<bool>("RGBColor")
                        .HasColumnType("bit");

                    b.Property<bool>("ShipsInternational")
                        .HasColumnType("bit")
                        .HasColumnOrder(8);

                    b.Property<bool>("ShipsNational")
                        .HasColumnType("bit")
                        .HasColumnOrder(7);

                    b.Property<int?>("SwitchFamily")
                        .HasColumnType("int");

                    b.Property<short?>("Warranty")
                        .IsRequired()
                        .HasColumnType("smallint")
                        .HasColumnOrder(6);

                    b.Property<bool>("Wireless")
                        .HasColumnType("bit");

                    b.Property<short?>("lenght")
                        .HasColumnType("smallint");

                    b.Property<short?>("width")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.ToTable("Keyboards");
                });

            modelBuilder.Entity("sigmaHashAlpha.Models.Products.Miscellaneous", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnOrder(1);

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(2);

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(4);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(3);

                    b.Property<float>("Price")
                        .HasColumnType("real")
                        .HasColumnOrder(5);

                    b.Property<bool>("ShipsInternational")
                        .HasColumnType("bit")
                        .HasColumnOrder(8);

                    b.Property<bool>("ShipsNational")
                        .HasColumnType("bit")
                        .HasColumnOrder(7);

                    b.Property<short?>("Warranty")
                        .IsRequired()
                        .HasColumnType("smallint")
                        .HasColumnOrder(6);

                    b.HasKey("Id");

                    b.ToTable("Miscellaneous");
                });

            modelBuilder.Entity("sigmaHashAlpha.Models.Products.Motherboard", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnOrder(1);

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(2);

                    b.Property<string>("BuiltInWifi")
                        .HasColumnType("nvarchar(max)");

                    b.Property<short?>("CPU4pins")
                        .HasColumnType("smallint");

                    b.Property<short?>("CPU4pinsplus")
                        .HasColumnType("smallint");

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(4);

                    b.Property<short?>("DDR2slots")
                        .HasColumnType("smallint");

                    b.Property<short?>("DDR3slots")
                        .HasColumnType("smallint");

                    b.Property<short?>("DDR4slots")
                        .HasColumnType("smallint");

                    b.Property<short?>("DDR5slots")
                        .HasColumnType("smallint");

                    b.Property<short?>("DDRslots")
                        .HasColumnType("smallint");

                    b.Property<short?>("DIVoutputs")
                        .HasColumnType("smallint");

                    b.Property<short?>("DisplayPorts")
                        .HasColumnType("smallint");

                    b.Property<short?>("HDMIoutputs")
                        .HasColumnType("smallint");

                    b.Property<short?>("M2SATA")
                        .HasColumnType("smallint");

                    b.Property<short?>("M2nvme")
                        .HasColumnType("smallint");

                    b.Property<short?>("M2slots")
                        .HasColumnType("smallint");

                    b.Property<short?>("MaxCpuWatts")
                        .HasColumnType("smallint");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(3);

                    b.Property<short?>("MultiGPU")
                        .HasColumnType("smallint");

                    b.Property<short?>("PCIE16Xslots")
                        .HasColumnType("smallint");

                    b.Property<short?>("PCIE1Xslots")
                        .HasColumnType("smallint");

                    b.Property<short?>("PCIE4X")
                        .HasColumnType("smallint");

                    b.Property<string>("Platform")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Price")
                        .HasColumnType("real")
                        .HasColumnOrder(5);

                    b.Property<string>("RGBconnection")
                        .HasColumnType("nvarchar(max)");

                    b.Property<short?>("SATAports")
                        .HasColumnType("smallint");

                    b.Property<bool>("ShipsInternational")
                        .HasColumnType("bit")
                        .HasColumnOrder(8);

                    b.Property<bool>("ShipsNational")
                        .HasColumnType("bit")
                        .HasColumnOrder(7);

                    b.Property<string>("Socket")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SoundCard")
                        .HasColumnType("nvarchar(max)");

                    b.Property<short?>("USB20")
                        .HasColumnType("smallint");

                    b.Property<short?>("USB30")
                        .HasColumnType("smallint");

                    b.Property<short?>("USB31")
                        .HasColumnType("smallint");

                    b.Property<short?>("USB32")
                        .HasColumnType("smallint");

                    b.Property<short?>("USBtypeC")
                        .HasColumnType("smallint");

                    b.Property<short?>("VGAoutputs")
                        .HasColumnType("smallint");

                    b.Property<short?>("Warranty")
                        .IsRequired()
                        .HasColumnType("smallint")
                        .HasColumnOrder(6);

                    b.Property<short?>("consumption")
                        .HasColumnType("smallint");

                    b.Property<string>("factor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<short?>("pins24")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.ToTable("Motherboards");
                });

            modelBuilder.Entity("sigmaHashAlpha.Models.Products.Mouse", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnOrder(1);

                    b.Property<bool>("AdjustableDPI")
                        .HasColumnType("bit");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(2);

                    b.Property<short?>("ButtonAmount")
                        .HasColumnType("smallint");

                    b.Property<bool>("CanChangeWeights")
                        .HasColumnType("bit");

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(4);

                    b.Property<short?>("MaximumDPI")
                        .HasColumnType("smallint");

                    b.Property<short?>("MinimumDPI")
                        .HasColumnType("smallint");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(3);

                    b.Property<float>("Price")
                        .HasColumnType("real")
                        .HasColumnOrder(5);

                    b.Property<string>("SensorType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ShipsInternational")
                        .HasColumnType("bit")
                        .HasColumnOrder(8);

                    b.Property<bool>("ShipsNational")
                        .HasColumnType("bit")
                        .HasColumnOrder(7);

                    b.Property<string>("SwitchesType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<short?>("Warranty")
                        .IsRequired()
                        .HasColumnType("smallint")
                        .HasColumnOrder(6);

                    b.Property<short?>("Weight")
                        .HasColumnType("smallint");

                    b.Property<short?>("Width")
                        .HasColumnType("smallint");

                    b.Property<bool>("Wired")
                        .HasColumnType("bit");

                    b.Property<bool>("Wireless")
                        .HasColumnType("bit");

                    b.Property<short?>("lenght")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.ToTable("Mouses");
                });

            modelBuilder.Entity("sigmaHashAlpha.Models.Products.ProductList", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnOrder(1);

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(2);

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(4);

                    b.Property<string>("DateCreated")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MainImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(3);

                    b.Property<float?>("Popularity")
                        .HasColumnType("real");

                    b.Property<float>("Price")
                        .HasColumnType("real")
                        .HasColumnOrder(5);

                    b.Property<bool>("ShipsInternational")
                        .HasColumnType("bit");

                    b.Property<bool>("ShipsNational")
                        .HasColumnType("bit");

                    b.Property<int>("SoldCounter")
                        .HasColumnType("int");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.Property<int>("VisitCounter")
                        .HasColumnType("int");

                    b.Property<short?>("Warranty")
                        .IsRequired()
                        .HasColumnType("smallint")
                        .HasColumnOrder(6);

                    b.HasKey("Id");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("sigmaHashAlpha.Models.Products.PSU", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnOrder(1);

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(2);

                    b.Property<short?>("CPU4Pin")
                        .HasColumnType("smallint");

                    b.Property<short?>("CPU4PinPlus")
                        .HasColumnType("smallint");

                    b.Property<string>("CableType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(4);

                    b.Property<string>("Certification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("DigitalPSU")
                        .HasColumnType("bit");

                    b.Property<short?>("FloppyConnection")
                        .HasColumnType("smallint");

                    b.Property<string>("Format")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HybridMode")
                        .HasColumnType("bit");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(3);

                    b.Property<short?>("MolexConnection")
                        .HasColumnType("smallint");

                    b.Property<short?>("PCI2PinPlus")
                        .HasColumnType("smallint");

                    b.Property<short?>("PCI6Pin")
                        .HasColumnType("smallint");

                    b.Property<short?>("Pin24")
                        .HasColumnType("smallint");

                    b.Property<float>("Price")
                        .HasColumnType("real")
                        .HasColumnOrder(5);

                    b.Property<short?>("SataConnection")
                        .HasColumnType("smallint");

                    b.Property<bool>("ShipsInternational")
                        .HasColumnType("bit")
                        .HasColumnOrder(8);

                    b.Property<bool>("ShipsNational")
                        .HasColumnType("bit")
                        .HasColumnOrder(7);

                    b.Property<short?>("Warranty")
                        .IsRequired()
                        .HasColumnType("smallint")
                        .HasColumnOrder(6);

                    b.Property<short?>("WattsNominal")
                        .HasColumnType("smallint");

                    b.Property<short?>("WattsReal")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.ToTable("Psus");
                });

            modelBuilder.Entity("sigmaHashAlpha.Models.Products.RAM", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnOrder(1);

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(2);

                    b.Property<short?>("Capacity")
                        .HasColumnType("smallint");

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(4);

                    b.Property<bool>("HeatSink")
                        .HasColumnType("bit");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(3);

                    b.Property<float>("Price")
                        .HasColumnType("real")
                        .HasColumnOrder(5);

                    b.Property<bool>("ShipsInternational")
                        .HasColumnType("bit")
                        .HasColumnOrder(8);

                    b.Property<bool>("ShipsNational")
                        .HasColumnType("bit")
                        .HasColumnOrder(7);

                    b.Property<short?>("Speed")
                        .HasColumnType("smallint");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Voltage")
                        .HasColumnType("float");

                    b.Property<short?>("Warranty")
                        .IsRequired()
                        .HasColumnType("smallint")
                        .HasColumnOrder(6);

                    b.HasKey("Id");

                    b.ToTable("Rams");
                });

            modelBuilder.Entity("sigmaHashAlpha.Models.Products.Storage", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnOrder(1);

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(2);

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(4);

                    b.Property<string>("ConnectionType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<short?>("Consumption")
                        .HasColumnType("smallint");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(3);

                    b.Property<float>("Price")
                        .HasColumnType("real")
                        .HasColumnOrder(5);

                    b.Property<short?>("RPM")
                        .HasColumnType("smallint");

                    b.Property<bool>("ShipsInternational")
                        .HasColumnType("bit")
                        .HasColumnOrder(8);

                    b.Property<bool>("ShipsNational")
                        .HasColumnType("bit")
                        .HasColumnOrder(7);

                    b.Property<short?>("StorageSize")
                        .HasColumnType("smallint");

                    b.Property<string>("StorageType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<short?>("Warranty")
                        .IsRequired()
                        .HasColumnType("smallint")
                        .HasColumnOrder(6);

                    b.HasKey("Id");

                    b.ToTable("Storages");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("sigmaHashAlpha.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("sigmaHashAlpha.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sigmaHashAlpha.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("sigmaHashAlpha.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
